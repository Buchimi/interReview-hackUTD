{"version":3,"sources":["utils/store.js","components/Fallback/index.js","components/Fallback/Fallback.js","routes.js","app.js","reportWebVitals.js","index.js","utils/firebase.js","utils/config.js","slices/app.slice.js","utils/const.js","components/FontIcon/FontIcon.js","components/FontIcon/index.js","components/Spinner/Spinner.js","components/Spinner/index.js"],"names":["store","configureStore","reducer","app","middleware","getDefaultMiddleware","Fallback","useEffect","NProgress","start","done","Auth","React","lazy","Dashboard","Router","dispatch","useDispatch","useSelector","state","checked","loggedIn","actions","authenticate","fallback","path","dashboard","to","className","Spinner","size","color","isLoading","App","loadFontIcons","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","analytics","auth","firestore","storage","ref","performance","slice","createSlice","name","initialState","me","reducers","setMe","action","payload","setLoggedIn","onAuthStateChanged","a","collection","doc","uid","get","user","emailVerified","exists","id","data","signup","fullName","email","password","Promise","resolve","reject","createUserWithEmailAndPassword","sendEmailVerification","set","login","signInWithEmailAndPassword","Error","logout","signOut","resetPassword","sendPasswordResetEmail","profile","confirmEmail","FontIcon","style","icon","defaultProps","library","add","faExclamationTriangle","faEnvelopeOpenText","faPaperPlane","others","loading"],"mappings":"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","file":"static/js/main.f4de70b9.chunk.js","sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport logger from 'redux-logger'\nimport app from 'slices/app.slice'\n\nconst store = configureStore({\n  reducer: {\n    app,\n  },\n  middleware:\n    process.env.NODE_ENV === 'production'\n      ? [...getDefaultMiddleware()]\n      : [...getDefaultMiddleware(), logger],\n})\n\nexport default store\n","import Fallback from './Fallback'\n\nexport default Fallback\n","import { useEffect } from 'react'\nimport NProgress from 'nprogress'\nimport 'nprogress/nprogress.css'\n\nconst Fallback = () => {\n  useEffect(() => {\n    NProgress.start()\n    return () => {\n      NProgress.done()\n    }\n  })\n\n  return ''\n}\n\nexport default Fallback\n","import React, { Suspense, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom'\nimport { actions } from 'slices/app.slice'\nimport { path } from 'utils/const'\nimport Fallback from 'components/Fallback'\nimport Spinner from 'components/Spinner'\n\nconst Auth = React.lazy(() => import('./pages/auth'))\nconst Dashboard = React.lazy(() => import('./pages/dashboard'))\n\nfunction Router() {\n  const dispatch = useDispatch()\n  const { checked, loggedIn } = useSelector((state) => state.app)\n\n  useEffect(() => {\n    dispatch(actions.authenticate())\n  }, [])\n\n  if (!checked) {\n    return (\n      <div className=\"app-loader-container\">\n        <Spinner size=\"4rem\" color=\"white\" isLoading />\n      </div>\n    )\n  }\n\n  return (\n    <BrowserRouter>\n      <Suspense fallback={<Fallback />}>\n        {!loggedIn ? (\n          <Switch>\n            <Route path=\"/\">\n              <Auth />\n            </Route>\n            <Redirect to=\"/\" />\n          </Switch>\n        ) : (\n          <Switch>\n            <Route path={path.dashboard}>\n              <Dashboard />\n            </Route>\n            <Redirect to={path.dashboard} />\n          </Switch>\n        )}\n      </Suspense>\n    </BrowserRouter>\n  )\n}\n\nexport default Router\n","import { useEffect } from 'react'\nimport { Provider } from 'react-redux'\nimport { loadFontIcons } from 'components/FontIcon'\nimport store from 'utils/store'\nimport Router from './routes'\n\nfunction App() {\n  useEffect(() => {\n    loadFontIcons()\n  }, [])\n\n  return (\n    <Provider store={store}>\n      <div data-testid=\"app\" className=\"app\">\n        <Router />\n      </div>\n    </Provider>\n  )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'app'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'theme/reset.scss'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\nimport 'firebase/storage'\nimport 'firebase/performance'\nimport 'firebase/analytics'\nimport config from './config'\n\nfirebase.initializeApp(config.firebase)\nfirebase.analytics()\n\nexport const auth = firebase.auth()\nexport const storage = firebase.storage().ref()\nexport const performance = firebase.performance()\nexport const firestore = firebase.firestore()\n\nexport default firebase\n","export default {\n  firebase: {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  },\n}\n","import { createSlice } from '@reduxjs/toolkit'\nimport { firestore, auth } from 'utils/firebase'\n\n// ------------------------------------\n// State\n// ------------------------------------\n\nconst initialState = {\n  checked: false,\n  loggedIn: false,\n  me: {},\n}\n\n// ------------------------------------\n// Slices\n// -----------------------------------\n\nconst slice = createSlice({\n  name: 'app',\n  initialState,\n  reducers: {\n    setMe: (state, action) => ({\n      ...state,\n      me: action.payload.me,\n      loggedIn: action.payload.loggedIn,\n      checked: true,\n    }),\n    setLoggedIn: (state, action) => ({\n      ...state,\n      loggedIn: action.payload,\n    }),\n  },\n})\n\n// ------------------------------------\n// Actions\n// -----------------------------------\n\nexport const authenticate = () => (dispatch) => {\n  auth.onAuthStateChanged(async (me) => {\n    if (!me) {\n      return dispatch(\n        slice.actions.setMe({\n          loggedIn: false,\n          checked: true,\n          me: {},\n        }),\n      )\n    }\n\n    // get user from firestore\n    const user = await firestore.collection('users').doc(me?.uid).get()\n\n    // login\n    return dispatch(\n      slice.actions.setMe({\n        loggedIn: me?.emailVerified && user.exists,\n        me: user.exists\n          ? { id: me?.uid, emailVerified: me?.emailVerified, ...user.data() }\n          : {},\n        checked: true,\n      }),\n    )\n  })\n}\n\nconst signup = ({ fullName, email, password }) => () =>\n  new Promise(async (resolve, reject) => {\n    try {\n      // create user\n      const { user } = await auth.createUserWithEmailAndPassword(\n        email,\n        password,\n      )\n\n      // send confirmation email\n      await user.sendEmailVerification()\n\n      // store user info in firestore\n      await firestore.collection('users').doc(user.uid).set({\n        fullName,\n        email,\n      })\n\n      resolve(user)\n    } catch (err) {\n      reject(err)\n    }\n  })\n\nconst login = ({ email, password }) => (dispatch) =>\n  new Promise(async (resolve, reject) => {\n    try {\n      const { user } = await auth.signInWithEmailAndPassword(email, password)\n      if (!user) reject(new Error('Failed to login. please try it again later'))\n      if (!user.emailVerified) await user.sendEmailVerification()\n      dispatch(authenticate())\n      resolve(user)\n    } catch (err) {\n      reject(err)\n    }\n  })\n\nconst logout = () => (dispatch) =>\n  new Promise(async (resolve, reject) => {\n    try {\n      await auth.signOut()\n      dispatch(\n        slice.actions.setMe({\n          checked: true,\n          loggedIn: false,\n          me: {},\n        }),\n      )\n      resolve()\n    } catch (err) {\n      reject(err)\n    }\n  })\n\nconst resetPassword = (email) => () => auth.sendPasswordResetEmail(email)\n\n// ------------------------------------\n// Exports\n// ------------------------------------\n\nexport const actions = {\n  ...slice.actions,\n  authenticate,\n  signup,\n  login,\n  logout,\n  resetPassword,\n}\n\nexport default slice.reducer\n","export const path = {\n  login: '/login',\n  signup: '/signup',\n  profile: '/profile',\n  resetPassword: '/reset-password',\n  confirmEmail: '/confirm-email',\n  dashboard: '/dashboard',\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport {\n  faExclamationTriangle,\n  faEnvelopeOpenText,\n  faPaperPlane,\n} from '@fortawesome/free-solid-svg-icons'\n\n// TODO: add icons here...\nexport const loadFontIcons = () =>\n  library.add(faExclamationTriangle, faEnvelopeOpenText, faPaperPlane)\n\nconst FontIcon = ({ name, className, style }) => (\n  <FontAwesomeIcon icon={name} className={className} style={style} />\n)\n\nFontIcon.propTypes = {\n  name: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.objectOf(PropTypes.object),\n}\n\nFontIcon.defaultProps = {\n  name: '',\n  className: '',\n  style: {},\n}\n\nexport default FontIcon\n","import FontIcon, { loadFontIcons as load } from './FontIcon'\n\nexport const loadFontIcons = load\n\nexport default FontIcon\n","import { ClipLoader } from 'react-spinners'\nimport { PropTypes } from 'prop-types'\n\n/**\n * types of spinners\n * https://www.davidhu.io/react-spinners/\n *\n * github\n * https://github.com/davidhu2000/react-spinners\n */\n\nconst Spinner = ({ color, size, isLoading, ...others }) => (\n  <ClipLoader color={color} size={size} loading={isLoading} {...others} />\n)\n\nSpinner.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.string,\n  isLoading: PropTypes.bool,\n}\n\nSpinner.defaultProps = {\n  color: 'black',\n  size: '1.5rem',\n  isLoading: false,\n}\n\nexport default Spinner\n","import Spinner from './Spinner'\n\nexport default Spinner\n"],"sourceRoot":""}